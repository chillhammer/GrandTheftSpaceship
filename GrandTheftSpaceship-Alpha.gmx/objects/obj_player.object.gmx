<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

move_spd = 3;
turn_spd = 6; //smaller is faster


hspd = 0;
vspd = 0;
controls_init();

warpFlash = false; //a variable that will flash if recently warped

//custom image angle so the collision box isnt affected
image_rot = 0;

alarm[0] = 5; // spawn on land;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this is temp code that will be factored
if(instance_exists(obj_planet_controller)){
    var pc = obj_planet_controller;
    
    //am i standing on ground?
    var xx = x div pc.block_size;
    var yy = y div pc.block_size;
    if(pc.terrain_grid[# xx, yy] &gt; pc.water_level)
        exit;
    
    
    for (i=0; i&lt;ds_grid_width(pc.terrain_grid); i+=1)
    {
        for (j=0; j&lt;ds_grid_height(pc.terrain_grid); j+=1)
        {
            if(pc.terrain_grid[# i,j] &gt; pc.water_level){
                x = i*pc.block_size;
                y = j*pc.block_size;
                exit;
            }
        };
        
    };
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Variables
warpFlash = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
var hor = controls_key_check(cont_right)-controls_key_check(cont_left);
var ver = controls_key_check(cont_down)-controls_key_check(cont_up);

hspd = hor*move_spd;
vspd = ver*move_spd;

var noWaterTileHor = true;
var noWaterTileVer = true;
if(instance_exists(obj_planet_controller)){
    var pc = obj_planet_controller;
    var xx = x div pc.block_size;
    var yy = y div pc.block_size;
    var width = (room_width div pc.block_size)-1;
    var height = (room_height div pc.block_size)-1;
    var block_hspd = sign(hspd)*1;
    var block_vspd = sign(vspd)*1;
    //check for water horizontally
    if(pc.terrain_grid[# warp_clamp(xx+block_hspd,0,width),yy] &lt; pc.water_level){
        noWaterTileHor = false;
    }
    //check for water vertically
    if(pc.terrain_grid[# xx,warp_clamp(yy+block_vspd,0,height)] &lt; pc.water_level){
        noWaterTileVer = false;
    }
    
    //water speed mod
    hspd *= 1-( (1-pc.liquid[? "speedmod"])*!noWaterTileHor );
    vspd *= (1-( (1-pc.liquid[? "speedmod"])*!noWaterTileVer ));
}


if(!place_meeting(warp_clamp(x+hspd,0,room_width),y,obj_solid))
    x += hspd;
    
if(!place_meeting(x,warp_clamp(y+vspd,0,room_height),obj_solid))
    y += vspd;

    
// x += hspd * (ifWater * 0.6);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp PLayer
warpFlash = warp();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image Angle &amp; Turning

if(!warpFlash){
    var pd = point_to_mouse(x,y);
    var dd = angle_difference(image_rot, pd);
    image_rot -= min(abs(dd), abs(dd)/turn_spd) * sign(dd);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_rot,image_blend,image_alpha);

draw_self_loop_ext(1,image_rot);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
