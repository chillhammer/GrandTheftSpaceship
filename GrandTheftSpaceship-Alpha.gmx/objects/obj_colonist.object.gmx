<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alien</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up an alarm
alarm[0] = 1;

ymove = 0;
xmove = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The real create event
image_blend = faction[? "color"];
spd = gauss(faction[? "speed"], faction[? "speed"]/6);

state = IDLE_STAND;
idletimer = 0;
idletimer_threshold = (3 + faction[? "attentionspan"]) * room_speed;

path = path_add();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit out if alarm[0] ain't ready
if (alarm[0] == 1)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The timer don't stop
if (state = IDLE_STAND)
    idletimer ++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Thresholds
if (idletimer &gt; idletimer_threshold)
{
    idletimer = 0;
    state = IDLE_MOVE;
    
    var success = false;
    var attempts = 0;
    while (success = false &amp;&amp; attempts &lt; 30)
    {
        //Try to find a suitable move location
        radius = spd * room_speed; //How far you can move in 1s will be our radius
        xmove = random_range(-radius,radius);
        ymove = sqrt(sqr(radius) - sqr(xmove)) * choose(-1,1);
        xmove += x;
        ymove += y;
        if (!collision_rectangle(xmove-sprite_width/2, ymove-sprite_height/2, xmove+sprite_width/2, ymove+sprite_height/2, obj_solid, 1, 0))
        {
                mp_potential_path_object(path, xmove, ymove, spd, 4, obj_solid);
                success = true;
                path_start(path, spd, path_action_stop, 1);
        }
        attempts ++;
    }
    if (attempts == 30)
        show_debug_message("Couldn't find a path.");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn and change state
image_angle = direction;
if (speed == 0 &amp;&amp; state = IDLE_MOVE)
{
    state = IDLE_STAND;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wrap
var pad = spd;
var xwarp = false;
var ywarp = false;

if( x &gt; room_width || x &lt; 0 || y &gt; room_height || y &lt; 0)
{
    if(x &gt; room_width) {x = pad; xwarp = true};
    if(x &lt; 0) {x = room_width-pad; xwarp = true};
    if(y &gt; room_height) {y = pad; ywarp = true};
    if(y &lt; 0) {y = room_height-pad; ywarp = true};
    
    path_end();
    if (xwarp = true)
    {
        if (xmove &lt; 0) xmove = room_width + xmove;
        if (xmove &gt; room_width) xmove = xmove - room_width;
    }
    if (ywarp = true)
    {
        if (ymove &lt; 0) ymove = room_height + ymove;
        if (ymove &gt; room_height) ymove = ymove - room_height;
    }
    mp_potential_path_object(path, xmove, ymove, spd, 4, obj_solid);
    path_start(path, spd, path_action_stop, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Loop
draw_self();
draw_self_loop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
