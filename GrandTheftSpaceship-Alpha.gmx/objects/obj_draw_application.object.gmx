<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Surfaces/Variables
global.scale = 2;
global.view_width = 1024;
global.view_height = 768;



map_surface = -1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free Surfaces

if( map_surface &gt; 0 )
    surface_free(map_surface);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Window Size

view_wview[VIEW_CAMERA]=global.view_width;
view_hview[VIEW_CAMERA]=global.view_height;

view_wport[VIEW_CAMERA]=global.view_width*global.scale;
view_hport[VIEW_CAMERA]=global.view_height*global.scale;

view_wview[VIEW_ENTIRE]=room_width;
view_hview[VIEW_ENTIRE]=room_height;


if(view_visible[VIEW_ENTIRE]){
    map_surface = surface_create(view_wview[VIEW_ENTIRE],view_hview[VIEW_ENTIRE]);
    surface_set_target(map_surface);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
    view_surface_id[VIEW_ENTIRE] = map_surface;
}


//ssssswindow_set_size(view_wport[VIEW_CAMERA],view_hport[VIEW_CAMERA]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Border Surfaces
if(surface_exists(map_surface)){
    var hview, wview, xview, yview;
    hview = view_hview[VIEW_CAMERA];
    wview = view_wview[VIEW_CAMERA];
    
    xview = view_xview[VIEW_CAMERA];
    yview = view_yview[VIEW_CAMERA];
    
    
    //right
    draw_surface_part(map_surface,0,0,wview,room_height,room_width,0);
    
    //left
    draw_surface_part(map_surface,room_width-wview,0,wview,room_height,-wview,0);
    
    //bottom
    draw_surface_part(map_surface,0,0,room_width,hview,0,room_height);
    
    //top
    draw_surface_part(map_surface,0,room_height-hview,room_width,hview,0,-hview);
    
    
    
    //topright
    draw_surface_part(map_surface,0,view_hview[VIEW_ENTIRE]-hview,wview,hview,room_width,-hview);
    
    //botright
    draw_surface_part(map_surface,0,0,wview,hview,room_width,room_height);
    
    //botleft
    draw_surface_part(map_surface,view_wview[VIEW_ENTIRE]-wview,0,wview,hview,-wview,room_height);
    
    //topleft
    draw_surface_part(map_surface,view_wview[VIEW_ENTIRE]-wview,view_hview[VIEW_ENTIRE]-hview,wview,hview,-wview,-hview);

}else{
    map_surface = surface_create(view_wview[VIEW_ENTIRE],view_hview[VIEW_ENTIRE]);
    surface_set_target(map_surface);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
    view_surface_id[VIEW_ENTIRE] = map_surface;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
